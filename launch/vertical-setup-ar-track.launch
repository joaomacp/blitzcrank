<launch>
    <arg name="gazebo" default="false" />

    <!-- Astra depth camera (only in real setup) -->
    <include unless="$(arg gazebo)" file="$(find astra_camera)/launch/astra.launch" />

    <!-- ar_track_alvar: track individual markers, output relative to camera frame -->
    <!-- <include file="$(find ar_track_alvar)/launch/indiv_socrob_alvar.launch">
        <arg name="output_frame" value="camera_rgb_optical_frame" />
    </include> -->

    <!-- Instead of above: track bundles -->
    <include file="$(find blitzcrank)/launch/ar-track.launch" />

    <!-- Robot base to world transform: change depending on base position -->
    <!-- <node pkg="tf" type="static_transform_publisher" name="robot_base_broadcaster" args="0 0 0 0 0 3.14 world j2s6s300_link_base 100" /> -->

    <!-- Simulated robot: Launch node that interfaces with Gazebo to get / set transforms -->
    <node if="$(arg gazebo)" pkg="blitzcrank" type="gazebo_interface" name="gazebo_interface" output="screen"/>

    <!-- Real robot: Publish static transform from robot base to camera TODO: use the yaml file-->
    <node unless="$(arg gazebo)" pkg="tf" type="static_transform_publisher" name="camera_rgb_optical_frame_broadcaster" args="-0.5 -0.4 0.5 0 0 4.1 j2s6s300_link_base camera_rgb_optical_frame 100" />

    <!-- TODO: use the yaml file -->
    <node pkg="tf" type="static_transform_publisher" name="virtual_tool_broadcaster" args="0 0 0.08 0 0 0 j2s6s300_end_effector virtual_tool 100" />

    <!-- Add the table and camera pole collision object to planning scene -->
    <node pkg="blitzcrank" type="vertical_planning_scene" name="vertical_planning_scene" />
</launch>